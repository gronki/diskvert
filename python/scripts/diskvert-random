#!/usr/bin/env python3
# coding: utf-8

from random import uniform, gauss, choice

mbh = choice([10**gauss(1.0, 0.3), 10**gauss(8.0, 0.5)])
mdot = 10**uniform(-2.5, -0.3)
radius = 10**uniform(0.6, 1.5)

f  = "  {:8s} {:.5g}"
print('# general parameters')
print(f.format('mbh', mbh))
print(f.format('mdot', mdot))
print(f.format('radius', radius))

alpha = 10**uniform(-2.3, -0.5)

print('\n# model parameters')
print(f.format('alpha', alpha))

qmin, qmax = 1.0, 10.0

if uniform(0, 1) < 0.67:
    eta = uniform(0.12, 0.3) * (alpha / 0.29)**0.5
    xi = max(uniform(0.2, 0.4) - eta, 0) * 10**uniform(-0.3,0)
    nu = 2 * xi / alpha
    print('# mode A')
else:
    eta = 0.22 * (alpha / 0.29)**uniform(0.3, 0.5)
    nu = 0.
    print('# mode B')

print(f.format('eta', eta))
q = 2 + (alpha / eta) * (nu - 1) 

if q < qmin:
    nu1 = 1 + (qmin * uniform(1.0, 1.25) - 2) * (eta / alpha) 
    print('# nu changed from {:.3g} to {:.3g}'.format(nu, nu1))
    nu = nu1
if q > qmax:
    nu1 = 1 + (qmax * uniform(0.75, 1.0) - 2) * (eta / alpha) 
    print('# nu changed from {:.3g} to {:.3g}'.format(nu, nu1))
    nu = nu1

print(f.format('nu', nu))

q = 2 + (alpha / eta) * (nu - 1) 
xi = alpha * nu / 2

print('# qcor = {:.3g}, beta0 = {:.3g}'.format(q, 2 * eta / alpha - 1 + nu))
print('# xi = {:.3g}, xi+eta = {:.3g}'.format(xi, xi + eta))

